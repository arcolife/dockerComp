#!/bin/bash

# increase this to slow down client
# decrease to speed up
WAIT_PERIOD=2

user_interrupt(){
    echo -e "\n\nKeyboard Interrupt detected."
    echo -e "Stopping Task Manager..."
    exit
}

trap user_interrupt SIGINT
trap user_interrupt SIGTSTP

TASK_REQUESTED=0
CLIENT_IP=`./get_ip.py`
DUMP_LOCATION='/tmp/dc_packet.json'

# CURRENT_WORKERS is also set in ./launch_workers when workers are launched
CURRENT_WORKERS=$(docker ps  | grep arcolife/docker_comp | awk -F' ' '{print $1}')
array=($CURRENT_WORKERS)

start_daemon(){
    while :; do
		for WORKER_ID in "${array[@]}"
		do
		    worker_ip=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' $WORKER_ID)
		    WORKER_STATUS=$(curl -s http://$worker_ip/status/)
		    # if 0, worker is ready for new task
		    if [[ $WORKER_STATUS -eq 0 ]]; then
				# worker waitin' on server
			    # echo "worker: $WORKER_ID | ip: $worker_ip | status: $WORKER_STATUS"
				ALIVE_TEST=$(curl -s http://$DC_HOST:$DC_PORT/test/server/)
				if [[ ALIVE_TEST -eq 200 ]]; then
				    # PACKET=$(curl http://$DC_HOST:$DC_PORT/task/request/$CLIENT_IP/$WORKER_ID/)
				    curl -s http://$DC_HOST:$DC_PORT/task/request/$CLIENT_IP/$WORKER_ID/ \
					    > $DUMP_LOCATION
				    # TODO: add mechanism to divide this packet in chunks and distribute accordingly

				    # if something received
				    # if [[ ! -z $PACKET ]]; then
				    if [[ -f $DUMP_LOCATION ]]; then
						# post packet to worker
						result=$(curl -s -H "Content-type: application/json" -X POST \
							http://$worker_ip/tasks/ -d @$DUMP_LOCATION)
						ack=$(curl -s -H "Content-type: application/json" -X POST \
								http://$DC_HOST:$DC_PORT/task/request/$CLIENT_IP/$WORKER_ID/ \
									-d '{ "result" : "'$result'" }')
						# set task status var back to 0
						echo "server ack: $ack"
						TASK_REQUESTED=0
				    fi
				else
					# server not up, wait for sometime
					echo "server seems to be Down. Waiting.."
				    sleep $WAIT_PERIOD
				fi
		    fi
		done

		# sleep before demanding more tasks from server
		sleep $WAIT_PERIOD
    done
}

start_daemon
